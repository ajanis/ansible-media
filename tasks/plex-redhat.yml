---
- name: Blacklist nouveau kernel module when cuda cards are present
  copy:
    dest: /etc/modprobe.d/blacklist-nouveau.conf
    content: |
      blacklist nouveau
      options nouveau modset=0
    mode: 0644
  notify: dracut requires update
  register: blacklist_nouveau

- meta: flush_handlers

- name: update dracut
  shell:
    cmd: dracut --force
  register: dracut_update_result
  when:
    - dracut_requires_update|default(False)

- name: Reboot after initramfs update and nouveau module blacklist
  reboot:
    connect_timeout: 10
    reboot_timeout: 600
    msg: Rebooting system via Ansible
  when:
    - dracut_update_result.rc -eq 0

- name: Install dependencies for building kernel modules and drivers
  package:
    name: "{{ nvidia_driver_dependencies }}"
    state: present

- name: enable EPEL repo
  yum:
    name: "{{ epel_rpm }}"
    state: present
- name: install yum repository for drivers
  yum_repository:
    file: "cuda-{{ ansible_distribution }}"
    baseurl: "http://developer.download.nvidia.com/compute/cuda/repos//{{ ansible_distribution }}/{{ ansible_machine }}"
    state: present
- name: install video driver for our card
  yum:
    name: "{{ nvidia_driver_packages }}"
    state: latest
    autoclean: yes
    update_cache: yes
  notify: reload docker

- name: Import nvidia-docker yum repository
  yum_repository:
    file: "nvidia-docker"
    baseurl: 'https://nvidia.github.io/nvidia-docker/{{ ansible_distribution }}{{ ansible_distribution_major_version }}'
    state: present

- name: Install nvidia-docker and container runtime
  yum:
    name: "{{ nvidia_docker_packages }}"
    state: present
    autoclean: yess
    update_cache: yes
  notify: reload docker

- name: Add nvidia runtime to docker
  copy:
    src: docker-daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0664
  notify: reload docker

- meta: flush_handlers

- name: reload systemctl and restart docker service if necessary
  systemd:
    daemon_reload: yes
    name: docker
    state: "{% if docker_requires_reload|default(False) %}restarted{% else %}started{% endif %}"
  when: docker_requires_reload|default(False)
